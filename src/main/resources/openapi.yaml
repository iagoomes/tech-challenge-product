openapi: 3.0.3
info:
  title: Product Management API
  description: API for managing products with CRUD operations.
  version: 1.0.0
tags:
  - name: "Product Management"
    description: "Endpoints for managing products."
paths:
  /products:
    get:
      operationId: getAllProducts
      tags:
        - Product Management
      summary: Retrieve all products
      description: Fetches a list of all registered products.
      responses:
        '200':
          $ref: '#/components/responses/ProductListResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: uploadProductCsv
      tags:
        - Product Management
      summary: Upload a CSV file to create products
      description: Adds new products to the system from a CSV file.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The CSV file containing product data.
      responses:
        '201':
          $ref: '#/components/responses/ProductCsvUploadResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{id}:
    get:
      operationId: getProductById
      tags:
        - Product Management
      summary: Retrieve a product by ID
      description: Fetches product details by its unique identifier.
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          $ref: '#/components/responses/ProductResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      operationId: updateProductById
      tags:
        - Product Management
      summary: Update a product by ID
      description: Updates an existing product with new details.
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        $ref: '#/components/requestBodies/ProductRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/ProductUpdatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      operationId: deleteProductById
      tags:
        - Product Management
      summary: Delete a product by ID
      description: Removes a product from the system.
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '204':
          description: Product successfully deleted.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    ProductId:
      name: id
      in: path
      required: true
      description: Unique identifier of the product.
      schema:
        type: integer
        format: int64

  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the product.
          readOnly: true
        name:
          type: string
          description: name of the product.
        description:
          type: string
          description: description of the product.
        price:
          type: number
          description: price of the product.
        stockQuantity:
          type: string
          description: stock quantity of the product.
      required:
        - name
        - description
        - price
        - stockQuantity

    ProductRequest:
      type: object
      properties:
        name:
          type: string
          description: name of the product.
        description:
          type: string
          description: description of the product.
        price:
          type: number
          description: price of the product.
        stockQuantity:
          type: string
          description: stock quantity of the product.
      required:
        - name
        - description
        - price
        - stockQuantity

    ProductCsvUploadResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message.
        createdCount:
          type: integer
          description: Number of products created.

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: HTTP status code of the error.
        message:
          type: string
          description: Error message describing the issue.
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred.

  requestBodies:
    ProductRequestBody:
      description: Product request payload.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductRequest'

  responses:
    ProductCsvUploadResponse:
      description: Products successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductCsvUploadResponse'

    ProductListResponse:
      description: A list of products.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Product'

    ProductResponse:
      description: Product details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'

    ProductCreatedResponse:
      description: Product successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'

    ProductUpdatedResponse:
      description: Product successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'

    BadRequest:
      description: Invalid request payload.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Product not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'